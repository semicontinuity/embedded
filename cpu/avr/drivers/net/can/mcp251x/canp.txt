CAN Protocol
================================================================================

Requirements
--------------------------------------------------------------------------------

The CAN protocol is designed to fulfill the following requirements:

- Support for multiple physical buses and routing.
- Possibility to debug system behaviour by analyzing bus traffic.
- Support messages addressed to a group of nodes (multicast).
- Nodes should provide information about themselves and their capabilities.
- Compatibility with Microchip CAN Extenders.


Design decisions
--------------------------------------------------------------------------------

Supported message types:
    - Information request message (also referred to as RTR or Query)
    - Output message, i.e. the message transmitted from the node with some payload.
      Can be initiated by the node itself (notification)
      or in response to information request message.
    - Input message, i.e. the message transmitting payload to the node.
    - Error message, that signals that Input message was rejected.

Only extended messages are supported,
to have long enough headers that have all the necessary fields.

Message headers contain addresses of both the sender and the receiver
of the message, to simplify system debugging by logging of all traffic.

To simplify software, no distinction is made between responses
to RTR and node-initiated notifications.
If the node is able to send notifications, an RTR will make the node
transmit a notification, as if the condition to transmit the notification
was met.

For compatibility with CAN extenders, RTR and RTR response messages
have the same ID bits (the only difference is in RTR bit and payload).
Thus, there are no fields like 'sender address' and 'receiver address'
in the header, but 'host address', 'counterparty address' and 'owner'.
It also makes the node software simpler: to generate the response to RTR,
it is only necessary to clear RTR bit
(but the router software is becoming more complex).

There is no field in the message to tell that the message is addressed to a group.
Certain ranges of addresses should be allocated to multicasts,
and a router, if present, should be consistent with the chosen address scheme.



Message header layout
--------------------------------------------------------------------------------

SID10 ..     SID3 SID2..0 IDE EID17 EID15  ..    EID8 EID7    ..   EID0
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|10            3| |2 1 0| |1| |   | |               | |               |
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|  Long Tag - 11 bits   |           |  Parameter (16 bits)            |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|short|   cpty  | | cpty|     |o|a| | host| host    | | slot          |
| tag | address | | net |     |w|u| |  net| address | |               |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+

- Parameter (16 bit): A virtual address, assigned to the 8-byte data item (parameter's value).
  Consists of:
  - host subnet and address: identifies the CAN node that hosts the addressed slot.
  - slot: identifies a parameter within the node.


- Short tag (3 bits): used to tag the specific type of traffic. also specifies the priority of the current message.
- Counterparty subnet and address: identifies the node, that is a counterparty in the current transaction.
  A couterparty is a sender of Input or Query message, or a recipient of Output or Error message.
  A system can be designed without the use of counterparty addresses,
  but it comes in handy when debugging a system (e.g. to identify the node that has sent a message),
  and also for networks with a router.

  In a single-master systems, contains the address of the master.
  Can be omitted to extend the Tag to 11 bits (Long Tag).

- Owner (1 bit): Set for a packet with the payload, transmitted by the owner of the parameter (from the owner to the client)
                 Reset for a packet with the payload, transmitted by the non-owner of the parameter (from the client to the owner)

- Auxiliary: Auxiliary bit, for now used to distinguish SYSTEM (1) and USER (0) messages.

The combination of Auxillary, RTR and Owner bits defines the message type:

- AUX=0, RTR=0, OWN=0:  POST request, the client asks the node to set the certain parameter to a specified value, or invoke a function.
- AUX=0, RTR=0, OWN=1:  Parameter VALUE, sent by the parameter owner. Either the response to GET or the owner-initiated notification.
- AUX=0, RTR=1, OWN=0:  STATUS response to PUT. DLC contains the status code.
- AUX=0, RTR=1, OWN=1:  GET request, the client asks the node to send out the value of a certain parameter.

- AUX=1, RTR=0, OWN=0:  System POST request, can be used to e.g. enable or disable notifications for a certain parameter.
- AUX=1, RTR=0, OWN=1:  Configuration memory range, sent in response to System GET.
- AUX=1, RTR=1, OWN=0:  STATUS response to System PUT. DLC macontains the status code.
- AUX=1, RTR=1, OWN=1:  System GET request for the range of configuration memory.


The router must examine RTR and OWNER bits, to identify the destination network of the packet.

Each node has a virtual memory space, that can be read or written remotely.
As the maximum payload of CAN message is 8 bytes,
the addresses used in read and write operations are aligned to 8-byte boundaries.
The 8-byte piece of memory is called a Slot.
Memory operations are using slot numbers instead of memory addresses.

In total, there are 9 bits in the message header for the slot number:
1 bit of AUX + 8 bits of SLOT, so there are 512 slots per node.
The lower 256 slots (AUX=0) are dedicated for user memory, and the higher 256 (AUX=1) for system memory.


Message header layout examples
--------------------------------------------------------------------------------

Client node 001.00001 sets the value of the parameter 010.00010.00000:

 0 1 1 0 0 0 0 1   0 0 1   0   0 0   0 1 0 0 0 0 1 0   0 0 0 0 0 0 0 0  (RTR=0: payload)
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|short|   cpty  | | cpty|  R  |o|a| | host| host    | | slot          |
| tag | address | | net |     |w|u| |  net| address | |               | 
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
Router sees that RTR==0 && Owner==0 => destination net is host net



Query for the value of the parameter 010.00010.00000 from the node 001.00001:

 0 1 1 0 0 0 0 1   0 0 1   1   1 0   0 1 0 0 0 0 1 0   0 0 0 0 0 0 0 0  (RTR=1: no payload)
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|short|   cpty  | | cpty|  R  |o|a| | host| host    | | slot          |
| tag | address | | net |     |w|u| |  net| address | |               | 
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
Router sees RTR==1 => destination net is host net
Owner bit is set to 1 so that query and response headers are the same (to use CAN extender chips)
If RTR==1 && Owner==0 => semantics undefined yet (
  e.g: notification to client(s) to invalidate their local copies of the specified parameter?
  e.g: (non) acknowledgement of the reception of the new value of the parameter
)


The node 010.00010 replies to the node 001.00001 with the value of the parameter 010.00010.00000
(or sends notification):

 0 1 1 0 0 0 0 1   0 0 1   0   1 0   0 1 0 0 0 0 1 0   0 0 0 0 0 0 0 0  (RTR=0: payload)
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|short|   cpty  | | cpty|  R  |o|a| | host| host    | | slot          |
| tag | address | | net |     |w|u| |  net| address | |               | 
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
Router sees RTR==0 && Owner==1 => destination net is counterparty net


Parallel GPIO Profile
--------------------------------------------------------------------------------

The Parallel GPIO profile describes a set of CAN parameters (registers),
pertaining to GPIO port,
and messages (reports) for configuration of every bit in the port
and performing I/O on a port.

The virtual port width can be any number of bits up to 64.
The information about the pins of the port and their capabilities
(e.g input-only, output-only, configurable input or output, or unavailable)
should be accessible via device descriptor.

Parameters (8 bytes per parameter):

- PORT_OUT:         The value if output latch, R/W.
- PORT_IN:
                    R: The value read by the port.
                    W: The bits to be toggled in the port, configured for output.
- PORT_CLEAR:
                    R: The bits that were cleared since the last read of PORT_CLEAR.
                    W: The bits to be cleared in the port, configured for output.
- PORT_SET:
                    R: The bits that were set since the last read of PORT_SET.
                    W: The bits to be set in the port, configured for output.

- PORT_CNF0:        Configuration for bits 0-15 of the port, R/W
- PORT_CNF1:        Configuration for bits 16-31 of the port, R/W
- PORT_CNF2:        Configuration for bits 32-47 of the port, R/W
- PORT_CNF3:        Configuration for bits 48-63 of the port, R/W


Configuration registers are organized in 4-byte units,
each unit specifies the configuration for one byte of the port:

- PORT_CNF0:        MODE00 MODE01 MODE02 MODE03 MODE10 MODE11 MODE12 MODE13
- PORT_CNF1:        MODE20 MODE21 MODE22 MODE23 MODE30 MODE31 MODE32 MODE33
- PORT_CNF2:        MODE40 MODE41 MODE42 MODE43 MODE50 MODE51 MODE52 MODE53
- PORT_CNF3:        MODE60 MODE61 MODE62 MODE63 MODE70 MODE71 MODE72 MODE73

E.g, MODE00..MODE03 configures the first 8 bits of the port.

For each bit in the port, 4 bits from bytes MODEx0..MODEx3 are interpreted as follows:

Bits 0 and 1 specify the pin mode:

- 00: High-impedance input.
- 01: High-impedance input, pull-up enabled.
- 10: High-impedance input, pull-down enabled.
- 11: Output.

If pin is confugured as input, bits 2 and 3 specify the pin change detection mode:

- 00: changes on the pin are not detected.
- 01: positive edge (setting a bit) is detected.
- 10: negative edge (clearing a bit) is detected.
- 11: any change is detected.

When the corresponding change occurs, if the change detection is enabled for the given bit,
the respective bit is set in PORT_CLEAR or PORT_SET, and can be read or sent as a notification.

The details of change detection are implementation-dependent;
change detection can be implemented with pin change interrupts, if present, or by polling the port value.

If pin is confugured as output, bits 2 and 3 specify the output driver properties:

- 00: push/pull output, fast.
- 01: open drain output, fast.
- 10: push/pull output, slow.
- 11: open drain output, slow.

If the corresponding bit in the port is not available,
the configuration bits read from CNFx registers are undefined.
Writing to these bits MUST have no effect, the bits read from the register SHOULD be the same as before,
and the error (NOT_OK) COULD be reported.

If the corresponding pin is configured for alternative use,
it is recommended that the configuration values SHOULD reflect the properties of the pin.

If some configuration bit values are not possible for the pin,
(e.g. pin is output-only, or input-only without the possibility of enabling pull-down, etc.)
setting unsupported values MUST have no effect, the bits read from the register SHOULD be the same as before,
and the error (NOT_OK) COULD be reported.

Reports can be smaller than 8 bytes;
in this cases, the affected bits are determined from the Data Length Code of the message.
