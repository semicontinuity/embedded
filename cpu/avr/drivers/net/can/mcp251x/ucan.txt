CAN Protocol
================================================================================

Requirements
--------------------------------------------------------------------------------

The CAN protocol is designed to fulfill the following requirements:

- Support for multiple physical buses and routing.
- Possibility to debug system behaviour by analyzing bus traffic.
- Support messages addressed to a group of nodes (multicast).
- Nodes should provide information about themselves and their capabilities.
- Compatibility with Microchip CAN Extenders.


Design decisions
--------------------------------------------------------------------------------

Supported message types:
- Information request message (also referred to as RTR or Query)
- Output message, i.e. the message transmitted from the node with some payload.
  Can be initiated by the node itself (notification)
  or in response to information request message.
- Input message, i.e. the message transmitting payload to the node.
- Error message, that signals that Input message was rejected.

Message headers contain addresses of both the sender and the receiver
of the message, to simplify system debugging by logging of all traffic.

To simplify software, no distinction is made between responses
to RTR and node-initiated notifications.
If the node is able to send notifications, an RTR will make the node
transmit a notification, as if the condition to transmit the notification
was met.

For compatibility with CAN extenders, RTR and RTR response messages
have the same ID bits (the only difference is in RTR bit and payload).
The parameter ID is placed into EID0 byte,
because CAN extender messages require certain bits in this byte for certain messages.

Only CAN extended messages are supported,
to have long enough headers that have all the necessary fields.


Message header layout
--------------------------------------------------------------------------------

Multicast messages
MC=1

SID10 ..     SID3 SID2..0 IDE EID17 EID15  ..    EID8 EID7    ..   EID0
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|10            3| |2 1 0| |1| |   | |               | |               |
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|     Tag - 11 bits     |           |                                 |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|  destination  | | OID |     |M|M| |  source       | | parameter ID  |
|   channel ID  | |     |     |T|C| |  module ID    | | (function ID) |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+

The regular network traffic consists of multicast messages.
Messages do not contain an ID of the destination module.
Instead, all modules accept messages based on parameter ID and tag.
A tag can be thought of as an instance number for the specified parameter.
Additionally, messages can be filtered on the source module ID field.


Unicast messages
MC=0

SID10 ..     SID3 SID2..0 IDE EID17 EID15  ..    EID8 EID7    ..   EID0
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|10            3| |2 1 0| |1| |   | |               | |               |
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|  destination  | | OID |     |M|M| |  source       | | parameter ID  |
|   module ID   | |     |     |T|C| |  module ID    | | (function ID) |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+

Unicast messages are messages addressed to a specific module.
These messages are intended for system debugging and maintenence,
because the impact of a message on the system is limited to the specific module.
Note that not all 11 tag bits are available in this mode, but only 3 lowest bits (Object ID).
The operations supported in this mode thus can address only 8 instances for any given parameter.


Message types
--------------------------------------------------------------------------------

The combination of RTR and MT bits defines the message type:

- RTR=0, OWN=0:  POST request
- RTR=0, OWN=1:  Parameter VALUE
- RTR=1, OWN=0:  STATUS response to PUT. DLC contains the status code.
- RTR=1, OWN=1:  GET request, the client asks the node to send out the value of a certain parameter.

POST requests should be used:
- To set the value of the parameter hosted on the receiving module.
- To invoke a non-idempotent action.

Input VALUE messages should be used:
- When the module listens to changes in the value of the parameter hosted by another module.
- To invoke a idempotent action.

Output VALUE messages should be used:
- When the module listens to changes in the value of the parameter hosted by another module.
- To invoke a idempotent action.


Message header layout examples
--------------------------------------------------------------------------------

Module 00100001 invokes function 00000000[00000001001]:

 0 0 0 0 0 0 0 1   0 0 1   0   0 1   0 0 1 0 0 0 0 1   0 0 0 0 0 0 0 0  (RTR=0: has payload)
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|     Tag - 11 bits     |           |                                 |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|  destination  | | OID |     |M|M| |  source       | | parameter ID  |
|   channel ID  | |     |     |T|C| |  module ID    | | (function ID) |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+


Module 00100001 asks for the value of the parameter 00000000[00000001001]

 0 0 0 0 0 0 0 1   0 0 1   1   1 1   0 0 1 0 0 0 0 1   0 0 0 0 0 0 0 0  (RTR=1: no payload)
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|     Tag - 11 bits     |           |                                 |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|  destination  | | OID |     |M|M| |  source       | | parameter ID  |
|   channel ID  | |     |     |T|C| |  module ID    | | (function ID) |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+


The module 00100010 replies with the value of the parameter 00000000[00000001001]

 0 0 0 0 0 0 0 1   0 0 1   0   1 1   0 0 1 0 0 0 1 0   0 0 0 0 0 0 0 0  (RTR=0: has payload)
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|     Tag - 11 bits     |           |                                 |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|  destination  | | OID |     |M|M| |  source       | | parameter ID  |
|   channel ID  | |     |     |T|C| |  module ID    | | (function ID) |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+


The module 00100010 broadcasts the value of the parameter 00000000[00000001001]

 0 0 0 0 0 0 0 1   0 0 1   0   1 1   0 0 1 0 0 0 1 0   0 0 0 0 0 0 0 0  (RTR=0: has payload)
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|     Tag - 11 bits     |           |                                 |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+
|  destination  | | OID |     |M|M| |  source       | | parameter ID  |
|   channel ID  | |     |     |T|C| |  module ID    | | (function ID) |
+-----+---------+ +-----+     +-+-+ +-----+---------+ +---------------+


Parameters
--------------------------------------------------------------------------------

Parameter family EMERGENCY (0x00)
    Port FIRE__SENSORS (0x00)
        Incoming VALUE messages contain state of fire/smoke sensors
        Incoming GET requests: requests for the state of fire/smoke sensors
        Outgoing VALUE messages contain the state of fire/smoke sensors
    Port GAS__SENSORS (0x01)
        Incoming VALUE messages contain the state of gas sensors
        Incoming GET requests: requests for the state of gas sensors
        Outgoing VALUE messages contain the state of gas sensors
    Port WATER__SENSORS (0x02)
        Incoming VALUE messages contain the state of water leak sensors
        Incoming GET requests: requests for the state of water leak sensors
        Outgoing VALUE messages contain the state of own water leak sensors
    Port FIRE__ACTUATORS (0x04)
        Incoming GET requests: requests for the state of fire extingushers
        Incoming POST requests: requests to change the state of fire extingushers
        Outgoing VALUE messages contain the state of fire extingushers
    Port GAS__ACTUATORS (0x05)
        Incoming GET requests: requests for the state of water valves
        Incoming POST requests: requests to change the state of water valves
        Outgoing VALUE messages containing the state of water valves
    Port WATER__ACTUATORS (0x06)
        Incoming GET requests: requests for the state of water valves
        Incoming POST requests: requests to change the state of water valves
        Outgoing VALUE messages contain the state of water valves

Parameter family PRESENCE (0x10)
    Port PRESENCE__MOTION_SENSORS (0x10)
        Incoming VALUE messages contain state of motion sensors
        Incoming GET requests: requests for the state of motion sensors
        Outgoing VALUE messages contain the state of motion sensors
    Port PRESENCE__DOOR_SENSORS (0x11)
        Incoming VALUE messages contain state of door sensors
        Incoming GET requests: requests for the state of door sensors
        Outgoing VALUE messages contain the state of door sensors
    Port PRESENCE__WINDOW_SENSORS (0x12)
        Incoming VALUE messages contain state of window sensors
        Incoming GET requests: requests for the state of window sensors
        Outgoing VALUE messages contain the state of window sensors
    Port PRESENCE__WINDOW_BREAK_SENSORS (0x13)
        Incoming VALUE messages contain state of window break sensors
        Incoming GET requests: requests for the state of window break sensors
        Outgoing VALUE messages contain the state of window break sensors
    Port PRESENCE__RFID_SENSOR (0x14)
        Outgoing VALUE messages contain the detected RFID tag ID

Parameter family SECURITY (0x20)
    Port SECURITY__AUTH (0x20)
        Incoming GET requests: requests for the auth token (password)
        Outgoing VALUE messages contain the auth token (password)
    Port SECURITY__STATE (0x21)
        Incoming GET requests: requests for the security state
        Outgoing VALUE messages contain the security state

Parameter family LIGHTING (0x30)

Parameter family HVAC (0x40)

Parameter family ELECTRICITY (0x50)

Parameter family WATER (0x60)

Parameter family MECHATRONICS (0x70)

Parameter family COMM (0x80)
    Port COMM__BINARY (0x80)
        Incoming GET requests: requests for the state of binary signals
        Incoming POST requests to change the state of binary signals
        Outgoing VALUE messages contain the state of binary signals
    Port COMM__ENUM (0x81)
        Incoming POST messages with number of pre-defined message (e.g. number of SMS message, IR command, etc).
        Outgoing POST messages with number of pre-defined message (e.g. number of SMS message, IR command, etc).
    Port COMM__STREAM (0x82)
        Incoming POST messages with stream data
        Outgoing POST messages with stream data
    Port COMM__BITS (0x83)
        Incoming GET requests: requests for the state of bit data
        Incoming POST messages with bit data
        Outgoing VALUE messages with bit data

Parameter family MEDIA (0x90)
    Port MEDIA__AMPLIFIER (0x90)
        Incoming GET requests: requests for the state of the amplier relay
        Incoming POST requests to change the state of the amplier relay
        Outgoing VALUE messages contain the state of the amplier relay

Parameter family CAMERA (0xA0)
