// Source code adopted from electronix.ru
// --------------------------------------

#ifndef __CPU__AVR__DRIVERS__DISPLAY__MT12864__DRIVER_H
#define __CPU__AVR__DRIVERS__DISPLAY__MT12864__DRIVER_H

#include "cpu/avr/gpio.h"

#define mt12864_clear_line_E   OUT_0(MT12864_E)
#define mt12864_clear_line_RW  OUT_0(MT12864_RW)
#define mt12864_clear_line_A0  OUT_0(MT12864_A0)
#define mt12864_clear_line_RES OUT_0(MT12864_RES)
#define mt12864_clear_line_CS1 OUT_0(MT12864_CS1)
#define mt12864_clear_line_CS2 OUT_0(MT12864_CS2)

#define mt12864_set_line_E     OUT_1(MT12864_E)
#define mt12864_set_line_RW    OUT_1(MT12864_RW)
#define mt12864_set_line_A0    OUT_1(MT12864_A0)
#define mt12864_set_line_RES   OUT_1(MT12864_RES)
#define mt12864_set_line_CS1   OUT_1(MT12864_CS1)
#define mt12864_set_line_CS2   OUT_1(MT12864_CS2)

// This ternary construct is more efficient - compiles to 10 bytes
//#define mt12864_clear_cs(chip) (chip == 0) ? ({mt12864_clear_line_CS1; 0;}) : ({mt12864_clear_line_CS2; 0;})
//#define mt12864_clear_cs(chip) ((chip == 0) ? OUT_0_RAW(MT12864_CS1) : OUT_0_RAW(MT12864_CS2))
#define mt12864_clear_cs(chip) do { if (chip == 0) {mt12864_clear_line_CS1;}; if (chip) {mt12864_clear_line_CS2;}} while(0)

#define mt12864_set_cs {mt12864_set_line_CS1; mt12864_set_line_CS2; }



#define mt12864_configure_ports() do {\
  USE_AS_OUTPUT(MT12864_E);\
  USE_AS_OUTPUT(MT12864_RW);\
  USE_AS_OUTPUT(MT12864_A0);\
  USE_AS_OUTPUT(MT12864_CS2);\
  USE_AS_OUTPUT(MT12864_CS1);\
  USE_AS_OUTPUT(MT12864_RES);\
} while(0)

#define mt12864_clear_all_control_lines() do {\
  mt12864_clear_line_E;\
  mt12864_clear_line_RW;\
  mt12864_clear_line_A0;\
  mt12864_clear_line_CS2;\
  mt12864_clear_line_CS1;\
} while(0)

/*--------------------------------------------------------------------------------------------*/
/* LCD data bus is connected to Port A.                                                       */
/*--------------------------------------------------------------------------------------------*/
#define LCD_Data_Bus_to_Output()        do { USE_PORT_AS_OUTPUT(MT12864_DATA); } while(0)
#define LCD_Data_Bus_To_Input()         do { USE_PORT_AS_INPUT(MT12864_DATA); ENABLE_PULLUPS(MT12864_DATA);} while(0)
#define Put_Data_to_LCD_Data_Bus(data)  OUT(MT12864_DATA, data)
#define Get_Data_from_LCD_Data_Bus()    PORT_VALUE(MT12864_DATA)





#define MT12864_CMD_DISPLAY_OFF                  (0x3E)
#define MT12864_CMD_DISPLAY_ON                   (0x3F)
#define MT12864_CMD_SET_DISPLAY_START_LINE(line) ((uint8_t)(0xC0 + ((uint8_t)line)))
#define MT12864_CMD_SET_PAGE(page)               ((uint8_t)(0xB8 + ((uint8_t)page)))
#define MT12864_CMD_SET_ADDRESS(column)          ((uint8_t)(0x40 + ((uint8_t)column)))

/*--------------------------------------------------------------------------------------------*/
/* Процедура инициализации дисплея.                                                           */
/* Принимает:   ничего не принимает.                                                          */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
void mt12864_init(void);

/*--------------------------------------------------------------------------------------------*/
/* Процедура записи команды в контроллеры ЖКИ.                                                */
/* Принимает:   контроллер (0, 1), код записываемой команды.                                  */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
void Write_Cmd_to_LCD(uint8_t c, uint8_t cmd);

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды установки адреса страницы (Page_Addr_Set).              */
/* Принимает:   контроллер (0, 1), номер страницы (0..7).                                     */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Page_Addr_Set(c, page)  Write_Cmd_to_LCD(c, MT12864_CMD_SET_PAGE(page))

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды установки адреса столбца (Column_Addr_Set).             */
/* Принимает:   контроллер (0, 1), номер столбца (0..63).                                     */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Column_Addr_Set(c, col)    Write_Cmd_to_LCD(c, MT12864_CMD_SET_ADDRESS(col));

/*--------------------------------------------------------------------------------------------*/
/* Процедура записи n копий байта данных в контроллер ЖКИ.                                    */
/* Принимает:   контроллер (0, 1), выводимый байт, число его повторений.                      */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
void Write_Data_to_LCD_n(uint8_t c, uint8_t data, uint8_t n);

/*--------------------------------------------------------------------------------------------*/
/* Процедура чтения содержимого n столбцов ЖКИ.                                               */
/* Принимает:   координаты начала чтения (страница/столбец),                                  */
/*              адрес массива для считанных байтов, число считываемых байтов.                 */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
void Read_Data_from_LCD_4(uint8_t P, uint8_t C, uint8_t *pData, uint8_t n);

/*--------------------------------------------------------------------------------------------*/
/* Процедура записи n байтов данных в столбцы ЖКИ.                                            */
/* Принимает:   координаты начала записи (страница/столбец),                                  */
/*              адрес массива с записываемыми байтами, число записываемых байтов.             */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
void Write_Data_to_LCD_4(uint8_t P, uint8_t C, uint8_t *pData, uint8_t n);


/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды включения (Display_ON).                                 */
/* Принимает:   ничего не принимает.                                                          */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Display_ON()            { Write_Cmd_to_LCD(0, MT12864_CMD_DISPLAY_ON); Write_Cmd_to_LCD(1, MT12864_CMD_DISPLAY_ON); }

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды выключения (Display_OFF).                               */
/* Принимает:   ничего не принимает.                                                          */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Display_OFF()           { Write_Cmd_to_LCD(0, MT12864_CMD_DISPLAY_OFF); Write_Cmd_to_LCD(1, MT12864_CMD_DISPLAY_OFF); }

#endif