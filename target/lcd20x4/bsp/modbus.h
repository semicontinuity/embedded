#ifndef MODBUS_H
#define MODBUS_H


#define MODBUS_FUNCTION_READ_COILS                 (1)
#define MODBUS_FUNCTION_READ_DISCRETE_INPUTS       (2)
#define MODBUS_FUNCTION_READ_HOLDING_REGISTERS     (3)
#define MODBUS_FUNCTION_READ_INPUT_REGISTERS       (4)
#define MODBUS_FUNCTION_WRITE_SINGLE_COIL          (5)
#define MODBUS_FUNCTION_WRITE_REGISTER             (6)

#define MODBUS_FUNCTION__READ_COILS__PAYLOAD_SIZE               (4)

#define MODBUS_FUNCTION__READ_HOLDING_REGISTERS__PAYLOAD_SIZE   (4)
#define MODBUS_FUNCTION__READ_HOLDING_REGISTERS__MAX_COUNT      (32)

#define MODBUS_FUNCTION__READ_INPUT_REGISTERS__PAYLOAD_SIZE     (4)
#define MODBUS_FUNCTION__READ_INPUT_REGISTERS__MAX_COUNT        (32)

#define MODBUS_FUNCTION__WRITE_REGISTER__PAYLOAD_SIZE           (4)
#define MODBUS_FUNCTION__WRITE_SINGLE_COIL__PAYLOAD_SIZE        (4)

#define MODBUS_FRAME_SIZE_MIN	                   (4)

#define MODBUS_FRAME_OFFSET_ADDRESS                (0)
#define MODBUS_FRAME_OFFSET_FUNCTION               (1)
#define MODBUS_FRAME_OFFSET_DATA                   (2)


typedef enum modbus_exception {
    MODBUS_EXCEPTION__NONE                              = 0x00,
    MODBUS_EXCEPTION__ILLEGAL_FUNCTION                  = 0x01,
    MODBUS_EXCEPTION__ILLEGAL_DATA_ADDRESS              = 0x02,
    MODBUS_EXCEPTION__ILLEGAL_DATA_VALUE                = 0x03,
    MODBUS_EXCEPTION__SLAVE_DEVICE_FAILURE              = 0x04,
    MODBUS_EXCEPTION__ACKNOWLEDGE                       = 0x05,
    MODBUS_EXCEPTION__SLAVE_BUSY                        = 0x06,
    MODBUS_EXCEPTION__MEMORY_PARITY_ERROR               = 0x08,
    MODBUS_EXCEPTION__GATEWAY_PATH_UNAVAILABLE          = 0x0A,
    MODBUS_EXCEPTION__GATEWAY_TARGET_FAILED_TO_RESPOND  = 0x0B
} modbus_exception;

#endif