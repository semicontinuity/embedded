
-------- begin --------
avr-gcc (GCC) 4.7.2
Copyright (C) 2012 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


Compiling C: main.c
avr-gcc -c -mmcu=atmega48 -I. -gdwarf-2 "-DUSART_BAUD_RATE = 4800UL" "-DLED_R__PORT = B" "-DLED_R__PIN = 1" "-DLED_G__PORT = D" "-DLED_G__PIN = 3" "-DLED_B__PORT = B" "-DLED_B__PIN = 2" "-DINLINE = inline" -DF_CPU=19660800UL -Ddebug__putc=usart0__out__write -I../../bsp -I../../../.. -O3 -mcall-prologues -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -Wall -Wstrict-prototypes -Wundef -Wa,-adhlns=.obj/main.lst  -std=gnu99 -Wundef -MD -MP -MF .dep/main.o.d main.c -o .obj/main.o
In file included from main.c:1:0:
../../bsp/pwm.h:31:5: warning: 'timer0__compare_a__interrupt_disable' is static but used in inline function 'pwm__stop' which is not static [enabled by default]
../../bsp/pwm.h:23:5: warning: 'timer0__compare_a__interrupt_enable' is static but used in inline function 'pwm__start' which is not static [enabled by default]
In file included from ../../bsp/pwm.h:5:0,
                 from main.c:1:
../../../../cpu/avr/timer0.h:9:13: warning: inline function 'timer0__comp__run' declared but never defined [enabled by default]
../../../../cpu/avr/timer0.h:9:13: warning: inline function 'timer0__comp__run' declared but never defined [enabled by default]

Compiling C: ../../bsp/pwm.c
avr-gcc -c -mmcu=atmega48 -I. -gdwarf-2 "-DUSART_BAUD_RATE = 4800UL" "-DLED_R__PORT = B" "-DLED_R__PIN = 1" "-DLED_G__PORT = D" "-DLED_G__PIN = 3" "-DLED_B__PORT = B" "-DLED_B__PIN = 2" "-DINLINE = inline" -DF_CPU=19660800UL -Ddebug__putc=usart0__out__write -I../../bsp -I../../../.. -O3 -mcall-prologues -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -Wall -Wstrict-prototypes -Wundef -Wa,-adhlns=.obj/../../bsp/pwm.lst  -std=gnu99 -Wundef -MD -MP -MF .dep/pwm.o.d ../../bsp/pwm.c -o .obj/pwm.o
   1               		.file	"pwm.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_14
  12               	__vector_14:
  13               	.LFB0:
  14               		.file 1 "../../bsp/pwm.c"
   1:../../bsp/pwm.c **** // Controller for driving RGB LED, attached to the 3 pins of the device port.
   2:../../bsp/pwm.c **** //
   3:../../bsp/pwm.c **** // User API:
   4:../../bsp/pwm.c **** // The desired color values for LEDs are specified in the 'colors' variable.
   5:../../bsp/pwm.c **** //
   6:../../bsp/pwm.c **** // Implementation:
   7:../../bsp/pwm.c **** // The 3-channel PWM is implemented in software, with one 8-bit timer (TIMER0).
   8:../../bsp/pwm.c **** //
   9:../../bsp/pwm.c **** // Bits in the output port are changing like this:
  10:../../bsp/pwm.c **** //     +----------+------+     ...   --+
  11:../../bsp/pwm.c **** //     |          |      |             |
  12:../../bsp/pwm.c **** // ----+          +------+---- ...   --+-----------
  13:../../bsp/pwm.c **** 
  14:../../bsp/pwm.c **** #include "cpu/avr/gpio.h"
  15:../../bsp/pwm.c **** 
  16:../../bsp/pwm.c **** #include <avr/io.h>
  17:../../bsp/pwm.c **** #include <avr/interrupt.h>
  18:../../bsp/pwm.c **** 
  19:../../bsp/pwm.c **** // Public variables
  20:../../bsp/pwm.c **** // -----------------------------------------------------------------------------
  21:../../bsp/pwm.c **** volatile uint8_t colors[3];
  22:../../bsp/pwm.c **** 
  23:../../bsp/pwm.c **** // Private variables
  24:../../bsp/pwm.c **** // -----------------------------------------------------------------------------
  25:../../bsp/pwm.c **** 
  26:../../bsp/pwm.c **** register uint8_t t asm("r5");
  27:../../bsp/pwm.c **** register uint8_t mask asm("r6");
  28:../../bsp/pwm.c **** 
  29:../../bsp/pwm.c **** 
  30:../../bsp/pwm.c **** /**
  31:../../bsp/pwm.c ****  * Timer 0 overflow interrupt handler
  32:../../bsp/pwm.c ****  */
  33:../../bsp/pwm.c **** ISR(TIMER0_COMPA_vect)
  34:../../bsp/pwm.c **** {
  15               		.loc 1 34 0
  16               		.cfi_startproc
  17 0000 1F92      		push r1
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 1, -2
  21 0002 0F92      		push r0
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 0, -3
  25 0004 0FB6      		in r0,__SREG__
  26 0006 0F92      		push r0
  27 0008 1124      		clr __zero_reg__
  28 000a 8F93      		push r24
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 24, -4
  32 000c 9F93      		push r25
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 25, -5
  36               	/* prologue: Signal */
  37               	/* frame size = 0 */
  38               	/* stack size = 5 */
  39               	.L__stack_usage = 5
  35:../../bsp/pwm.c **** 
  36:../../bsp/pwm.c ****     // if 256 timer overflows happened, start over.
  37:../../bsp/pwm.c ****     if (++t == 0) {
  40               		.loc 1 37 0
  41 000e 852D      		mov r24,r5
  42 0010 8F5F      		subi r24,lo8(-(1))
  43 0012 582E      		mov r5,r24
  44 0014 01F4      		brne .L2
  38:../../bsp/pwm.c **** //        mask = _BV(PWM_0_PIN)|_BV(PWM_1_PIN)|_BV(PWM_2_PIN);
  39:../../bsp/pwm.c ****         OUT_1(LED_R);
  45               		.loc 1 39 0
  46 0016 299A      		sbi 0x5,1
  40:../../bsp/pwm.c ****         OUT_1(LED_G);
  47               		.loc 1 40 0
  48 0018 5B9A      		sbi 0xb,3
  41:../../bsp/pwm.c ****         OUT_1(LED_B);
  49               		.loc 1 41 0
  50 001a 2A9A      		sbi 0x5,2
  51               	.L2:
  52               	.LVL0:
  42:../../bsp/pwm.c ****     }
  43:../../bsp/pwm.c **** 
  44:../../bsp/pwm.c ****     uint8_t index = 0;
  45:../../bsp/pwm.c ****     // Loop unrolled for performance reason
  46:../../bsp/pwm.c **** //    if (t == colors[index++]) mask &= ~_BV(PWM_0_PIN);
  47:../../bsp/pwm.c **** //    if (t == colors[index++]) mask &= ~_BV(PWM_1_PIN);
  48:../../bsp/pwm.c **** //    if (t == colors[index++]) mask &= ~_BV(PWM_2_PIN);
  49:../../bsp/pwm.c ****     if (t == colors[index++]) OUT_0(LED_R);
  53               		.loc 1 49 0
  54 001c 9091 0000 		lds r25,colors
  55               	.LVL1:
  56 0020 9817      		cp r25,r24
  57 0022 01F0      		breq .L7
  58               	.L3:
  50:../../bsp/pwm.c ****     if (t == colors[index++]) OUT_0(LED_G);
  59               		.loc 1 50 0
  60 0024 9091 0000 		lds r25,colors+1
  61               	.LVL2:
  62 0028 9817      		cp r25,r24
  63 002a 01F0      		breq .L8
  64               	.L4:
  51:../../bsp/pwm.c ****     if (t == colors[index++]) OUT_0(LED_B);
  65               		.loc 1 51 0
  66 002c 9091 0000 		lds r25,colors+2
  67               	.LVL3:
  68 0030 9813      		cpse r25,r24
  69 0032 00C0      		rjmp .L1
  70               		.loc 1 51 0 is_stmt 0 discriminator 1
  71 0034 2A98      		cbi 0x5,2
  72               	.L1:
  73               	/* epilogue start */
  52:../../bsp/pwm.c **** 
  53:../../bsp/pwm.c **** //    PWM_PORT = mask;
  54:../../bsp/pwm.c **** }
  74               		.loc 1 54 0 is_stmt 1
  75 0036 9F91      		pop r25
  76 0038 8F91      		pop r24
  77 003a 0F90      		pop r0
  78 003c 0FBE      		out __SREG__,r0
  79 003e 0F90      		pop r0
  80 0040 1F90      		pop r1
  81 0042 1895      		reti
  82               	.LVL4:
  83               	.L8:
  50:../../bsp/pwm.c ****     if (t == colors[index++]) OUT_0(LED_G);
  84               		.loc 1 50 0 discriminator 1
  85 0044 5B98      		cbi 0xb,3
  86 0046 00C0      		rjmp .L4
  87               	.LVL5:
  88               	.L7:
  49:../../bsp/pwm.c ****     if (t == colors[index++]) OUT_0(LED_R);
  89               		.loc 1 49 0 discriminator 1
  90 0048 2998      		cbi 0x5,1
  91 004a 00C0      		rjmp .L3
  92               		.cfi_endproc
  93               	.LFE0:
  95               		.comm	colors,3,1
  96               	.Letext0:
  97               		.file 2 "o:\\soft\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../avr/include/stdint
DEFINED SYMBOLS
                            *ABS*:00000000 pwm.c
C:\Users\ikar\AppData\Local\Temp\ccExY2Dr.s:2      *ABS*:0000003e __SP_H__
C:\Users\ikar\AppData\Local\Temp\ccExY2Dr.s:3      *ABS*:0000003d __SP_L__
C:\Users\ikar\AppData\Local\Temp\ccExY2Dr.s:4      *ABS*:0000003f __SREG__
C:\Users\ikar\AppData\Local\Temp\ccExY2Dr.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\ikar\AppData\Local\Temp\ccExY2Dr.s:6      *ABS*:00000001 __zero_reg__
C:\Users\ikar\AppData\Local\Temp\ccExY2Dr.s:12     .text:00000000 __vector_14
                            *COM*:00000003 colors

UNDEFINED SYMBOLS
__do_clear_bss
C:\Users\ikar\AppData\Local\Temp\ccExY2Dr.s: Assembler messages:
C:\Users\ikar\AppData\Local\Temp\ccExY2Dr.s: Warning: can't open .obj/../../bsp/pwm.lst: No such file or directory

Linking: test.elf
avr-gcc -mmcu=atmega48 -I. -gdwarf-2 "-DUSART_BAUD_RATE = 4800UL" "-DLED_R__PORT = B" "-DLED_R__PIN = 1" "-DLED_G__PORT = D" "-DLED_G__PIN = 3" "-DLED_B__PORT = B" "-DLED_B__PIN = 2" "-DINLINE = inline" -DF_CPU=19660800UL -Ddebug__putc=usart0__out__write -I../../bsp -I../../../.. -O3 -mcall-prologues -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -Wall -Wstrict-prototypes -Wundef -Wa,-adhlns=.obj/main.o  -std=gnu99 -Wundef -MD -MP -MF .dep/test.elf.d .obj/main.o .obj/pwm.o    --output test.elf -Wl,-Map=test.map,--cref    -lm

Creating load file for Flash: test.hex
avr-objcopy -O ihex -R .eeprom test.elf test.hex

Creating load file for EEPROM: test.eep
avr-objcopy -j .eeprom --set-section-flags=.eeprom="alloc,load" --change-section-lma .eeprom=0 -O ihex test.elf test.eep
o:\soft\avr-gcc-4.7.2-mingw32\bin\avr-objcopy.exe: --change-section-lma .eeprom=0x00000000 never used

Creating Extended Listing: test.lss
avr-objdump -h -S test.elf > test.lss

Creating Symbol Table: test.sym
avr-nm -n test.elf > test.sym

Size after:
test.elf  :
section          size      addr
.data               0   8388864
.text             414         0
.bss                3   8388864
.stab            1740         0
.stabstr          110         0
.comment           17         0
.debug_aranges    128         0
.debug_info      1381         0
.debug_abbrev     526         0
.debug_line       960         0
.debug_frame       96         0
.debug_str        339         0
.debug_loc        183         0
.debug_ranges      16         0
Total            5913



-------- end --------

