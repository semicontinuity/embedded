BLM memories
====================
* 128 3-byte entries for palette memory
* 16 3-byte entries for video memory (1 page), with the possibility to extend to 8 pages
* 3 2-byte entries for palette selector memory, with 3-bit selector for every LED

Color modes
====================
* 16M colors: data written to video memory page
* 128 indexed colors: every entry of palette memory encodes a color
* 16 indexed colors: 4 bits select a color from a palette for a given LED.
  Palette is chosen from a set of 8 palettes with a pallette selector memory.
* 8 indexed colors for every LED:
  Color is chosen from a 8-color palette, associated with every LED.

Protocol v0.1
====================

0-byte message:
RESET

1-byte messages are for high speed transfers.
Type of 1-byte messages should be configurable with separate command.

1-byte message, type PAINT16
Set color for LED N (0-15) from the current palette.
--------------------------------------------------------------
[ LED : 4 ][ COLOR : 4]

1-byte message, type PACKED4
Adjust color for 4 LEDs, for MIDIBox compatibility
--------------------------------------------------------------
[ DIR: 1 ] [ POS : 2] [ CHANNEL: 1] [ PATTERN : 4]
* DIR: direction; 0 = horizontal, 1 = vertical
* POS: row or column
* CHANNEL: color channel to adjust with PATTERN (0 or 1).

Modifies palette selector memory (channel 0 or 1),
updates contents of video memory appropriately,
and transfers video memory to LEDs.
Channel 2 can only be modified with CONFIGURE command.


2+ byte messages:

WRITE_PALETTE
------------------------------------------------------------
[ 1 ] [ start entry : 7 bits ] [ 3-byte color values ]

WRITE_VMEM
------------------------------------------------------------
[ 000 ] [ DIR: 1] [ START_LED : 4]
[ 3-byte color value ]+
automatic refresh, if writing to active video page

WRITE_VMEM_2?
------------------------------------------------------------
[ 000 ] [ DIR: 1] [ TODO : 4]
[ 1-byte position + 3-byte color values ]+
automatic refresh, if writing to active video page

UNPACK16
------------------------------------------------------------
[ 001 ] [ DIR: 1] [ REFRESH : 1] [ POS + HALF : 3] [ nibbles...]

UNPACK16_2?
------------------------------------------------------------
[ 001 ] [ DIR: 1] [ REFRESH : 1] [ POS + HALF : 3] [ LED:4 + color:4 ]*

CONFIGURE
------------------------------------------------------------
[ 010 ] [ TODO: 5] [ 1-6 bytes of palette selector memory ]

WRITE_PALETTE_SELECTOR_ENTRY
------------------------------------------------------------
[ 011 ] [ REFRESH: 1] [ ENTRY: 4]   [ TODO: 5 ] [ SELECTOR: 3 ]
Copy 3 bits to paletter selector memory and update video memory correspondingly.
Can be used to change 1 LED (with index ENTRY) in 8-color mode.
Re-paint LEDs if REFRESH bit is set.


Protocol v0.2
====================
* Palette selector memory: 16 bytes, every byte corresponds to a LED and contains indexed color value (0-127) for that LED.

WRITE_PALETTE
------------------------------------------------------------
Update 1 or more entries of palette memory.
[ 1 ] [ START_ENTRY : 7 bits ]
[ 3-byte color value ]+ (1 or more 3-byte entries)
* START_ENTRY: number of entry to start writing to
no refresh after command reception

WRITE_VMEM
------------------------------------------------------------
Paint with RGB colors.
Update 1 or more entries of video memory
[ 00 ] [ DIR: 1] [ REFRESH: 1] [ START_LED : 4]
[ 3-byte color value ]+ (1 or more 3-byte entries)
* DIR: direction; 0 = horizontal, 1 = vertical
* START_LED: number of LED to start painting at
* REFRESH: refresh LEDs after when command is handled

UNPACK128
------------------------------------------------------------
Paint with indexed colors.
Select 1 of 128 colors for a given LED from palette and write the resulting RGB value to video memory.
[ 01 ] [ DIR: 1] [ REFRESH : 1] [ LED : 4]
[ 1-byte color value =[ RESERVED: 1][ INDEX : 7 ] ]+ (1 or more bytes)

* DIR: direction; 0 = horizontal, 1 = vertical
* REFRESH: refresh LEDs after when command is handled
* START_LED: number of LED to start painting at
* INDEX: indexed color value, 0-127 (because WRITE_PALETTE can address ofly 128 entries, and memory limitations of low-end MCU)

For every payload byte:
Palette selector memory for a LED is updated with the INDEX value.
Then, color value for INDEX is fetched from the palette and written to the video memory.
Display is optionally refreshed.

UNPACK4
--------------------------------------------------------------
Adjust color for 4 LEDs, for MIDIBox compatibility
[ CHANNEL: 1 ] [ POS : 2] [ DIR: 1 ] [ PATTERN : 4]
* DIR: direction; 0 = horizontal, 1 = vertical
* POS: row or column
* CHANNEL: color channel to adjust with PATTERN (0 or 1).

Modifies palette selector memory (bit 0 or 1),
updates contents of video memory correspondingly,
and transfers video memory to LEDs.
All channels can be modified with UNPACK128 command (but only for 1 LED (?)).
